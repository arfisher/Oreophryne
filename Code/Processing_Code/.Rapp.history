lm.fit <- procD.lm(coords~species * site, data=gdf)#
summary(lm.fit)
ref<-mshape(gdf$coords)
gp1.mn<-mshape(gdf$coords[,,gdf$species=="Jord"])#
plotRefToTarget(ref,gp1.mn,mag=2, links=plethodon$links)
plotAllSpecimens(gdf$coords,links=plethodon$links)
gp1.mn<-mshape(gdf$coords[,,gdf$species=="Jord"])#
plotRefToTarget(ref,gp1.mn,mag=9, links=plethodon$links)
ref<-mshape(gdf$coords)gp1.mn<-mshape(gdf$coords[,gdf$species=="Teyah",gdf$species=="Jord"])#
plotRefToTarget(ref,gp1.mn,mag=2, links=plethodon$links)
gp1.mn<-mshape(gdf$coords[,,gdf$species=="Jord"])#
plotRefToTarget(ref,gp1.mn,mag=9, links=plethodon$links)
ref<-mshape(gdf$coords)gp1.mn<-mshape(gdf$coords[,gdf$species=="Teyah",gdf$species=="Jord"])#
plotRefToTarget(ref,gp1.mn,mag=2, links=plethodon$links)
gp2.mn<-mshape(gdf$coords[,,gdf$species=="Teyah"])
plotRefToTarget(gp2.mn,gp1.mn,mag=2, links=plethodon$links)
plotRefToTarget(ref,gp1.mn,mag=2, links=plethodon$links)
plotRefToTarget(gp2.mn,gp1.mn,mag=2, links=plethodon$links)
plotRefToTarget(gp1.mn,gp2.mn,mag=2, links=plethodon$links)
require(ggplot2)#
require(dplyr)#
#
## ---- loaddata --------#
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- cleanup --------#
#Making a new rectangular dataframe for only converted measurements (mm not pixels) for each specimen#
#
# exclude rows with NAs#
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)#
#
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)#
#
## ---- exploratoryplots --------#
# create scatter plots of SVL vs finger:toe ratio and SVL vs anterior width:posterior width of palatal groove, colored by genus#
svl.vs.ft <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ft, col=dat2$genus))#
svl.vs.ft#
#
svl.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ap, col=dat2$genus))#
svl.vs.ap#
#
# just for fun... ft vs ap by genus#
ft.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = ft, y = ap, col=dat2$genus))#
ft.vs.ap#
#
#density plots#
ft.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ft`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ft.dens#
#
ap.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ap`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ap.dens#
# we can see some trends but no clear distinctions yet#
#
## ---- summarystats ------#
#lets see means for each species#
dat2$gensp <- paste0(dat2$genus, dat2$species)#
#
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
#
# and for each genus#
dat2 %>%                                      #
  group_by(genus) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
#
## ---- ttests ------#
# trying package rempsyc to make pretty ttest tables#
require(rempsyc)#
require(effectsize)#
require(flextable)#
t.test.results <- nice_t_test(#
  data = dat2,#
  response = names(dat2)[4:9],#
  group = "genus",#
  warning = FALSE)#
t.test.results#
#
my_table <- nice_table(t.test.results)#
my_table#
#
# t-test results are really only valid for the ratios ft and ap because finger/toe size and anterior/posterior palatal groove widths likely scale to body size, should be standardized#
#
## ---- PCA --------#
#let's try a PCA, this comes from a datacamp tutorial <https://www.datacamp.com/tutorial/pca-analysis-r>#
require(corrr)#
require(ggcorrplot)#
require(FactoMineR)#
require(factoextra)#
#
str(dat2) # show summary of data#
colSums(is.na(dat2)) # check for nulls#
dat3 <- dat2[,4:10] # take only numerical columns#
#
head(dat3)#
#
dat4 <- scale(dat3) # normalize data#
head(dat4)#
#
corr_matrix <- cor(dat4) #
ggcorrplot(corr_matrix) # view a correlation matrix for the variables#
#
data.pca <- princomp(corr_matrix) # calculate PCA analysis#
summary(data.pca) # print summary of results#
#
data.pca$loadings[, 1:2] #
#
fviz_eig(data.pca, addlabels = TRUE)#
#
## ---- phylogenyexperiment ----#
require(phytools)#
#
tree_location <- "../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)
tree_location <- "../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)
tree_location <- "../../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)
require(ggplot2)#
require(dplyr)#
#
## ---- loaddata --------#
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- cleanup --------#
#Making a new rectangular dataframe for only converted measurements (mm not pixels) for each specimen#
#
# exclude rows with NAs#
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)#
#
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)#
#
## ---- exploratoryplots --------#
# create scatter plots of SVL vs finger:toe ratio and SVL vs anterior width:posterior width of palatal groove, colored by genus#
svl.vs.ft <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ft, col=dat2$genus))#
svl.vs.ft#
#
svl.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ap, col=dat2$genus))#
svl.vs.ap#
#
# just for fun... ft vs ap by genus#
ft.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = ft, y = ap, col=dat2$genus))#
ft.vs.ap#
#
#density plots#
ft.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ft`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ft.dens#
#
ap.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ap`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ap.dens#
# we can see some trends but no clear distinctions yet#
#
## ---- summarystats ------#
#lets see means for each species#
dat2$gensp <- paste0(dat2$genus, dat2$species)#
#
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
#
# and for each genus#
dat2 %>%                                      #
  group_by(genus) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
#
## ---- ttests ------#
# trying package rempsyc to make pretty ttest tables#
require(rempsyc)#
require(effectsize)#
require(flextable)#
t.test.results <- nice_t_test(#
  data = dat2,#
  response = names(dat2)[4:9],#
  group = "genus",#
  warning = FALSE)#
t.test.results#
#
my_table <- nice_table(t.test.results)#
my_table#
#
# t-test results are really only valid for the ratios ft and ap because finger/toe size and anterior/posterior palatal groove widths likely scale to body size, should be standardized#
#
## ---- PCA --------#
#let's try a PCA, this comes from a datacamp tutorial <https://www.datacamp.com/tutorial/pca-analysis-r>#
require(corrr)#
require(ggcorrplot)#
require(FactoMineR)#
require(factoextra)#
#
str(dat2) # show summary of data#
colSums(is.na(dat2)) # check for nulls#
dat3 <- dat2[,4:10] # take only numerical columns#
#
head(dat3)#
#
dat4 <- scale(dat3) # normalize data#
head(dat4)#
#
corr_matrix <- cor(dat4) #
ggcorrplot(corr_matrix) # view a correlation matrix for the variables#
#
data.pca <- princomp(corr_matrix) # calculate PCA analysis#
summary(data.pca) # print summary of results#
#
data.pca$loadings[, 1:2] #
#
fviz_eig(data.pca, addlabels = TRUE)#
#
## ---- phylogenyexperiment ----#
require(phytools)#
#
tree_location <- "../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)#
#
species<-c("t2","t4","t6","t8","t10")
tree
unique(dat2$species)
unique(dat2$gensp)
species<-c("Oreophryneinornata",   "Oreophryneloriae" ,    "Oreophrynenotata"   , #
 ,"Oreophryneparkeri" ,   "Oreophrynebiroi" ,     "Oreophryneanamiatoi" #
,"Auparoparopenelopeia", "Auparoparoinsulana" ,  "Auparoparophoebe"    #
, "Auparoparopicticrus" , "Auparoparomatawan"  ,  "Auparoparoezra"  )
species<-c("Oreophryneinornata",   "Oreophryneloriae" ,    "Oreophrynenotata"   , #
 "Oreophryneparkeri" ,   "Oreophrynebiroi" ,     "Oreophryneanamiatoi" #
,"Auparoparopenelopeia", "Auparoparoinsulana" ,  "Auparoparophoebe"    #
, "Auparoparopicticrus" , "Auparoparomatawan"  ,  "Auparoparoezra"  )
pruned.tree<-drop.tip(tree,tree$tip.label[-match(species, tree$tip.label)])
write.tree(pruned.tree)
plot(pruned.tree)
dotTree(pruned.tree,dat2,standardize=TRUE,length=10)
require(phytools)
packageVersion("phytools")
dat3 <- as.matrix(dat2)
dotTree(tree,dat3,length=10,ftype="i")
dat3 <- as.matrix(dat2)[,1]
dotTree(pruned.tree,dat3,length=10,ftype="i")
head(dat3)
head(dat2)
dat3 <- as.matrix(dat2)
head(dat3)
dat3 <- as.matrix(dat2)[,7]
head(dat3)
dotTree(pruned.tree,dat3,length=10,ftype="i")
plotTree.barplot(pruned.tree,dat3)
dat3 <- as.matrix(dat2)
dotTree(pruned.tree,dat3,length=10,ftype="i")
plotTree.barplot(pruned.tree,dat3)
dotTree(pruned.tree, dat3)
require(ggplot2)#
require(dplyr)#
#
## ---- loaddata --------#
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
#
## ---- cleanup --------#
#Making a new rectangular dataframe for only converted measurements (mm not pixels) for each specimen#
#
# exclude rows with NAs#
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)#
#
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)
head(rawdata)
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)
svl.vs.ft <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ft, col=dat2$genus))#
svl.vs.ft
svl.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ap, col=dat2$genus))#
svl.vs.ap
ft.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = ft, y = ap, col=dat2$genus))#
ft.vs.ap
ft.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ft`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ft.dens
ap.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ap`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ap.dens
ap.dens
dat2$gensp <- paste0(dat2$genus, dat2$species)
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
dat2 %>%                                      #
  group_by(genus) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
require(rempsyc)#
require(effectsize)#
require(flextable)#
t.test.results <- nice_t_test(#
  data = dat2,#
  response = names(dat2)[4:9],#
  group = "genus",#
  warning = FALSE)#
t.test.results
my_table <- nice_table(t.test.results)#
my_table
t.test.results <- nice_t_test(#
  data = dat2,#
  response = names(dat2)[4:10],#
  group = "genus",#
  warning = FALSE)#
t.test.results#
#
my_table <- nice_table(t.test.results)#
my_table
skimr::skim(dat2)
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../../Data/Raw_data/"
rawdata <- read.csv(data_location, check.names=FALSE)#
head(rawdata)
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
data_path <- "../../Data/Raw_data/"
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)
## ---- savedata --------#
processeddata <- dat2      # change if you did more steps#
#
# location to save file#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)#
#
## ---- finallook --------#
#
print(dat2 )
## ---- setup -----#
#load needed packages. make sure they are installed.#
require(ggplot2) #for plotting#
require(magrittr) #for piping#
require(knitr) #for formatting output#
#
#path to data and results #
data_path <- "../../Data/Processed_data/"#
results_path <- "../../Results/"#
#
## ---- functions ----#
# function to paste path to output filenames#
#
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}#
#
## ---- loaddata ----#
# load data. #
dat <- readRDS( addpath("processeddata.rds", data_path) )#
#
## ---- summarize ----#
# create summary table of the data using skimr to use in paper#
# variables, sample size, mean, standard error#
#
sk <- skimr::skim(dat)  # save skim object#
sk <- as.data.frame(sk) # save as data.frame#
head(sk)  # see the variable names#
#
nrows <- dim(dat)[1] # total number of rows#
sk$N <- nrows - sk$n_missing  # sample size of each variable
sk
## ---- summary.table ----#
# select only the variable, N, mean, sd, and category counts#
#
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]#
names(sk.table) <- c("Variable", "N", "Mean", "SE", "Counts") # rename SD as SE#
sk.table$SE <- sk.table$SE/sqrt(sk.table$N) # calculate SE#
#
options(knitr.kable.NA = "")#
knitr::kable(sk.table, digits=2)#
# save summary table#
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
## ---- summary.table ----#
# select only the variable, N, mean, sd, and category counts#
#
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts"),]#
names(sk.table) <- c("Variable", "N", "Mean", "SE", "Counts") # rename SD as SE#
sk.table$SE <- sk.table$SE/sqrt(sk.table$N) # calculate SE#
#
options(knitr.kable.NA = "")#
knitr::kable(sk.table, digits=2)#
# save summary table#
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
sk.table$N
sk.table
sk$N <- nrows - sk$n_missing  # sample size of each variable
sk$N
sk
sk.table <- sk[,c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
sk.table <- sk[,cbind("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
sk.table <- sk[,c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts"),]
sk.table
sk.table <- sk[,c("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
sk.table <- sk[,colbind("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
sk.table <- sk[,cbind("skim_variable", "N", "numeric.mean", "numeric.sd", "factor.top_counts")]
col.names(sk)
colnames(sk)
sk <- skimr::skim(dat)  # save skim object#
sk <- as.data.frame(sk) # save as data.frame#
head(sk)  # see the variable names#
#
nrows <- dim(dat)[1] # total number of rows#
sk$N <- nrows - sk$n_missing  # sample size of each variable#
#
## ---- summary.table ----
head(sk)  # see the variable names
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd"),]
names(sk.table) <- c("Variable", "N", "Mean", "SE", "Counts") # rename SD as SE
sk.table$SE <- sk.table$SE/sqrt(sk.table$N) # calculate SE
sk.table$N
sk <- skimr::skim(dat)  # save skim object#
sk <- as.data.frame(sk) # save as data.frame#
head(sk)  # see the variable names#
#
nrows <- dim(dat)[1] # total number of rows#
sk$N <- nrows - sk$n_missing  # sample size of each variable#
#
## ---- summary.table ----
sk.table$N
sk$N
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd"),]
sk.table
sk <- skimr::skim(dat)  # save skim object#
sk <- as.data.frame(sk) # save as data.frame#
head(sk)  # see the variable names#
#
nrows <- dim(dat)[1] # total number of rows#
sk$N <- nrows - sk$n_missing  # sample size of each variable#
#
## ---- summary.table ----
sk$N
sk.table <- sk[c("skim_variable", "N", "numeric.mean", "numeric.sd")]
sk.table
names(sk.table) <- c("Variable", "N", "Mean", "SE") # rename SD as SE
sk.table$SE <- sk.table$SE/sqrt(sk.table$N) # calculate SE
options(knitr.kable.NA = "")#
knitr::kable(sk.table, digits=2)
options(knitr.kable.NA = "")#
knitr::kable(sk.table, digits=2)#
# save summary table#
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
#path to data and results #
data_path <- "../../Data/Processed_data/"#
results_path <- "../../Results/"#
#
## ---- functions ----#
# function to paste path to output filenames#
#
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}
options(knitr.kable.NA = "")#
knitr::kable(sk.table, digits=2)#
# save summary table#
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
results_path <- "../Results/"
addpath <- function( filename, path=data_path ) {#
    location <- paste( path, filename, sep="")#
	return( location )#
}
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
results_path <- "../../Results/"
saveRDS(sk.table, file = addpath("summary_table.rds", results_path))
dat2$gensp <- paste0(dat2$genus, dat2$species) #combine genus and species names to sort species by genus
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
# and for each genus#
dat2 %>%                                      #
  group_by(genus) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean, stdv))
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean, sd))
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean = mean, stdev = sd))
by.spec <- dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean = mean, stdev = sd))
by.spec %>% #
    arrange(across(everything()))
new_order = sort(colnames(by.spec))#
df2 <- by.spec[, new_order]#
df2
require(rempsyc)#
require(effectsize)#
require(flextable)#
t.test.results <- nice_t_test(#
  data = dat2,#
  response = names(dat2)[4:10],#
  group = "genus",#
  warning = FALSE)#
t.test.results#
#
my_table <- nice_table(t.test.results)#
my_table
lm(dat2)
lmft = lm(svl~ft, data = dat2)
head(dat2)
lmft = lm(SVL~ft, data = dat2)
summary(lmft)
plot(dat2)
with(dat2, plot(`ft` ~ genus))
dat2$ft <- as.factor(dat2$"ft")
with(dat2, plot(`ft` ~ genus))
dat2
with(dat2, plot(`ft` ~ genus))
with(dat2, plot(ft ~ genus))
with(dat2, boxplot(ft ~ genus))
with(dat2, boxplot(ap ~ genus))
## ---- genus_ap_boxplot ----#
#
# plot to screen#
with(dat2, boxplot(ap ~ genus))#
#
# plot to .png file, can also do pdf using `pdf()` function #
png(filename = addpath("genus_ap_boxplot.png", results_path))#
  with(dat2, boxplot(ap ~ genus))#
dev.off()
# plot to screen#
with(dat2, boxplot(ft ~ genus))#
#
# plot to .png file, can also do pdf using `pdf()` function #
png(filename = addpath("genus_ft_boxplot.png", results_path))#
  with(dat2, boxplot(ft ~ genus))#
dev.off()
lm.fit.s <- lm(ft ~ genus, dat2)  #
anova.table.s <- anova(lm.fit.s)
dat2$ft <- as.factor(dat2$"ft")
lm.fit.s <- lm(ft ~ genus, dat2)  #
anova.table.s <- anova(lm.fit.s)
dat2$ft <- as.numeric(dat2$"ft")
lm.fit.s <- lm(ft ~ genus, dat2)
anova.table.s <- anova(lm.fit.s)
print(anova.table.s)
lm.fit.s <- lm(ft ~ species, dat2)
anova.table.s <- anova(lm.fit.s)
print(anova.table.s)
dat2$ft <- as.numeric(dat2$"ft")#
#
lm.fit.f <- lm(ft ~ genus, dat2)  #
anova.table.f <- anova(lm.fit.f)#
#
# print to screen the anova table#
print(anova.table.f)#
#
# save anova table to file in Results folder  #
saveRDS(anova.table.f, file = addpath("ft_genus_anova.rds", results_path))
lm.fit.a <- lm(ap ~ genus, dat2)  #
anova.table.a <- anova(lm.fit.a)#
#
# print to screen the anova table#
print(anova.table.a)#
#
# save anova table to file in Results folder  #
saveRDS(anova.table.a, file = addpath("ap_genus_anova.rds", results_path))
require(phytools)#
#
tree_location <- "../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)#
#
species<-c("Oreophryneinornata",   "Oreophryneloriae" ,    "Oreophrynenotata"   , #
 "Oreophryneparkeri" ,   "Oreophrynebiroi" ,     "Oreophryneanamiatoi" #
,"Auparoparopenelopeia", "Auparoparoinsulana" ,  "Auparoparophoebe"    #
, "Auparoparopicticrus" , "Auparoparomatawan"  ,  "Auparoparoezra"  ) #select included taxa#
#
pruned.tree<-drop.tip(tree,tree$tip.label[-match(species, tree$tip.label)])#
write.tree(pruned.tree) #remove other taxa#
plot(pruned.tree)
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
str(dat2) # show summary of data#
colSums(is.na(dat2)) # check for nulls#
dat3 <- dat2[,4:10] # take only numerical columns
head(dat3)
str(dat2) # show summary of data#
colSums(is.na(dat2)) # check for nulls#
dat3 <- dat2[,4:10] # take only numerical columns
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
head(dat3)
dat3 <- dat2[,4:11] # take only numerical columns and gensp
head(dat3)
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
dotTree(pruned.tree,dat3,standardize=TRUE,length=15)
pruned.tree
plot(pruned.tree)
plotTree.barplot(tree,dat3)
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
phylo.heatmap(pruned.tree,dat3,standardize=TRUE)
as.numeric(dat3[1:7])
dat3 %>% relocate(gensp, .before=SVL)
class(dat3)
class(dat3$SVL)
class(dat3$ft)
class(dat3[1:8])
row.names(dat3) <- dat3$gensp
dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
spec.means <- dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
as.dataframe(spec.means)
as.data.frame(spec.means)
gen.means <- dat2 %>%                                      #
  group_by(genus) %>%                         #
  summarise_at(vars(SVL, finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
as.data.frame(gen.means)
as.data.frame(spec.means, row.names=1)
rownames(spec.means)
dat3 <- (spec.means, row.names=1)
dat3 <- as.data.frame(spec.means, row.names=1)
rownames(dat3)
row.names(spec.means) <- spec.means$gensp
print(spec.means)
dat3 <- as.data.frame(spec.means)#
row.names(dat3) <- dat3$gensp
rownames(dat3)
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
phylo.heatmap(pruned.tree,dat3,standardize=TRUE)
dotTree(pruned.tree,dat3,standardize=TRUE,length=10)
dat3
dat4 <- dat3[,-1]
dotTree(pruned.tree,dat4,standardize=TRUE,length=10)
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
spec.means <- dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(SVL, finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
print(spec.means)
dat3 <- as.data.frame(spec.means)#
row.names(dat3) <- dat3$gensp#
dat4 <- dat3[,-1]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
phylo.heatmap(pruned.tree,dat4,standardize=FALSE)
dat4
dat3
dat2
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
head(rawdata)
head(rawdata) #notice because of the format of ImageJ output and the way I converted pixels to mm, there are 5 rows with NA for each specimen#
#
#Making a new rectangular dataframe for only converted measurements (mm not pixels) for each specimen#
#
# exclude rows with NAs#
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)#
#
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)
spec.means <- dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(SVL, finger, toe, ft, anterior, posterior, ap),          #
               list(mean)) #
print(spec.means)
head(dat2)
dat2$gensp <- paste0(dat2$genus, dat2$species) #combine genus and species names to sort species by genus#
#
spec.means <- dat2 %>%                                      #
  group_by(gensp) %>%                         #
  summarise_at(vars(SVL, finger, toe, ft, anterior, posterior, ap),          #
               list(mean))
print(spec.means)
dat3 <- as.data.frame(spec.means)#
row.names(dat3) <- dat3$gensp#
dat4 <- dat3[,-1]
phylo.heatmap(pruned.tree,dat4,standardize=FALSE)
dat4 <- dat3[,-1:2]
dat4 <- dat3[,-c(1:2)]
phylo.heatmap(pruned.tree,dat4,standardize=FALSE)
dat4 <- dat3[,-c(1)]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dat4 <- dat3[,-c(1:2)]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dat4 <- dat3[,-c(1)]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dotTree(pruned.tree,dat3$SVL,standardize=TRUE,length=10)
dat3
dotTree(pruned.tree,dat3$SVL,standardize=FALSE,length=10)
dotTree(pruned.tree,dat3,standardize=FALSE,length=10)
dotTree(pruned.tree,dat4,standardize=FALSE,length=10)
dat4 <- dat3[,-c(1)]
dat4 <- dat3[,-c(1:2)]
dotTree(pruned.tree,dat4,standardize=FALSE,length=10)
dotTree(pruned.tree,dat4,standardize=TRUE,length=10)
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dat4 <- dat3[,-c(1)]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dat4 <- dat3[,-c(1:2)]
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
phylo.heatmap(pruned.tree,dat4,standardize=FALSE)
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
dat3 <- as.data.frame(spec.means)#
row.names(dat3) <- dat3$gensp #gensp must be rownames, no character columns allowed#
dat4 <- dat3[,-c(1:2)]#
#
tree_location <- "../../Data/Raw_data/asterophryinae_partitions.nex.timetree.nwk"#
tree <- read.newick(tree_location)#
#
species<-c("Oreophryneinornata",   "Oreophryneloriae" ,    "Oreophrynenotata"   , #
 "Oreophryneparkeri" ,   "Oreophrynebiroi" ,     "Oreophryneanamiatoi" #
,"Auparoparopenelopeia", "Auparoparoinsulana" ,  "Auparoparophoebe"    #
, "Auparoparopicticrus" , "Auparoparomatawan"  ,  "Auparoparoezra"  ) #select included taxa#
#
pruned.tree<-drop.tip(tree,tree$tip.label[-match(species, tree$tip.label)])#
write.tree(pruned.tree) #remove other taxa#
plot(pruned.tree)#
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
pruned.tree<-drop.tip(tree,tree$tip.label[-match(species, tree$tip.label)])#
write.tree(pruned.tree) #remove other taxa#
plot(pruned.tree)
phylo.heatmap(pruned.tree,dat4,standardize=TRUE)
png(filename = addpath("phylo_heatmap.png", results_path))#
  phylo.heatmap(pruned.tree,dat4,standardize=TRUE)#
dev.off()
png(filename = addpath("svl_ft.png", results_path))#
  svl.vs.ft#
dev.off()
png(filename = addpath("svl_ap.png", results_path))#
  svl.vs.ap#
dev.off()
png(filename = addpath("ft_ap.png", results_path))#
  ft.vs.ap#
dev.off()
png(filename = addpath("ft_dens.png", results_path))#
  ft.dens#
dev.off()
png(filename = addpath("ap_dens.png", results_path))#
  ap.dens#
dev.off()
################################
# Frog processing script#
##
#this script loads the raw data, processes and cleans it #
#and saves it as Rds file in the Processed_data folder#
#
## ---- packages --------#
#load needed packages. make sure they are installed.#
require(ggplot2) #exploring plots#
require(dplyr) #for data processing/cleaning#
require(skimr) #for nice visualization of data #
#
## ---- loaddata --------#
data_location <- "../../Data/Raw_data/Oreophryne_Character_Measurements.csv"#
data_path <- "../../Data/Raw_data/"#
#
rawdata <- read.csv(data_location, check.names=FALSE)#
head(rawdata)#
#
# view data dictionary#
dictionary <- read.csv(paste(data_path, "datadictionary.csv", sep=""))#
print(dictionary)#
#
## ---- cleanup --------#
head(rawdata) #notice because of the format of ImageJ output and the way I converted pixels to mm, there are 5 rows with NA for each specimen#
#
#Making a new rectangular dataframe for only converted measurements (mm not pixels) for each specimen#
#
# exclude rows with NAs#
nas <- which( is.na(rawdata$BPBM) ) # find which rows have NA #
dat <- rawdata[-nas,] # exclude these rows#
head(dat)#
#
#removing unnecessary columns, artifacts from importing pixel measurements from ImageJ#
dat2 <- dat[-c(5:13)]#
#
#cleaning up column names#
colnames(dat2) <- c("genus","species", "BPBM", "SVL", "finger", "toe", "ft", "anterior", "posterior", "ap")#
#
head(dat2)#
#
## ---- exploredata --------#
#
# look at the data#
skimr::skim(dat2)#
#
## ---- exploratoryplots --------#
# create scatter plots of SVL vs finger:toe ratio and SVL vs anterior width:posterior width of palatal groove, colored by genus#
svl.vs.ft <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ft, col=dat2$genus))#
svl.vs.ft#
#
png(filename = addpath("svl_ft.png", results_path))#
  svl.vs.ft#
dev.off()#
#
svl.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = SVL, y = ap, col=dat2$genus))#
svl.vs.ap#
#
png(filename = addpath("svl_ap.png", results_path))#
  svl.vs.ap#
dev.off()#
#
# just for fun... ft vs ap by genus#
ft.vs.ap <- ggplot(data = dat2) + geom_point(aes(x = ft, y = ap, col=dat2$genus))#
ft.vs.ap#
#
png(filename = addpath("ft_ap.png", results_path))#
  ft.vs.ap#
dev.off()#
#
#density plots#
ft.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ft`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ft.dens#
#
png(filename = addpath("ft_dens.png", results_path))#
  ft.dens#
dev.off()#
#
ap.dens <- dat2 %>%    # CC by species#
        ggplot( aes(x=`ap`)) + #
		geom_density( aes(fill=genus), alpha=.5)#
ap.dens#
#
png(filename = addpath("ap_dens.png", results_path))#
  ap.dens#
dev.off()#
# we can see some trends but no clear distinctions yet#
#
## ---- savedata --------#
processeddata <- dat2      # change if you did more steps#
#
# location to save file#
save_data_location <- "../../Data/Processed_data/processeddata.rds"#
saveRDS(processeddata, file = save_data_location)#
#
save_data_location_csv <- "../../Data/Processed_data/processeddata.csv"#
write.csv(processeddata, file = save_data_location_csv, row.names=FALSE)#
#
## ---- finallook --------#
#
print(dat2 )
